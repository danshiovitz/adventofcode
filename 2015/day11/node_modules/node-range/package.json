{
  "name": "node-range",
  "version": "0.1.0",
  "description": "Simple Lazy Ranges for Node/Javascript",
  "main": "range.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/miketheprogrammer/node-range.git"
  },
  "keywords": [
    "range",
    "node",
    "lazy",
    "map",
    "foreach"
  ],
  "author": {
    "name": "Michael Hernandez",
    "email": " http://miketheprogrammer.com "
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/miketheprogrammer/node-range/issues"
  },
  "readme": "node-range\n==========\n\nSimple Lazy Ranges for Node/Javascript\n\nInstall:\n\nnpm install node-range\n\n/*\n  Faster than Array.map since it does\n  array composition and function application in same step\n*/\nvar arr = range(1,11).map(function(i) {\n    return i*5\n})\nconsole.log(arr)\n\n/*\nYou can still do\n*/\narr = range(1,11).toArray().map(function(i) {\n    return i*2\n})\nconsole.log(arr)\n\n\n/*\nAs well we can just execute a function against a range but not return an array\n*/\nrange(1,11).forEach(function(i) {\n    console.log(Math.exp(i,2))\n})\n\n/*\nAs well we can execute Async\n*/\nrange(1,11).forEachAsync(function(i) {\n    console.log('num:' + Math.exp(i,2));\n})\nconsole.log('This should come first')\n\n",
  "readmeFilename": "README.md",
  "_id": "node-range@0.1.0",
  "dist": {
    "shasum": "e82f765d8d852ee8a4f31a6dd2064aa180651f68"
  },
  "_from": "node-range@",
  "_resolved": "https://registry.npmjs.org/node-range/-/node-range-0.1.0.tgz"
}
